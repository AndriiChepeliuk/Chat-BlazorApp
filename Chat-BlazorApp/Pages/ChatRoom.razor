@page "/chat-room"
@using Chat_BlazorApp.Data;
@using Chat_BlazorApp.Entities.UserEntity;
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Identity
@inject NavigationManager NavManager
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@implements IAsyncDisposable
@inject AuthenticationStateProvider AuthenticationStateProvider


<AuthorizeView>
    <Authorized>
        <div class="form-group">
            <label>
                Message: <input size="100" @bind="messageInput" />
            </label>
        </div>
        <button @onclick="Send" disabled="@(IsConnected == false)">Send</button>

        <hr />

        <ul>
            @foreach (string message in messages)
            {
                <li>@message</li>
            }
        </ul>
    </Authorized>
    <NotAuthorized>
        You must be logged in to start using RealChat
    </NotAuthorized>
</AuthorizeView>


@code {
    private HubConnection? hubConnection;
    private List<string> messages = new();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var test = user.Claims.ToList();

        userInput = user.Identity.Name;

        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavManager.ToAbsoluteUri("/chathub"))
        .WithAutomaticReconnect()
        .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var formattedMessage = $"{user}: {message}";
            messages.Add(formattedMessage);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
            messageInput = "";
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
